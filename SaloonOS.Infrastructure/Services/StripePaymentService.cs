using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Stripe;
using SaloonOS.Application.Common.Configuration;
using SaloonOS.Application.Common.Contracts; // <-- CORRECTED: Added missing using directive.
using SaloonOS.Application.Exceptions;

namespace SaloonOS.Infrastructure.Services;

/// <summary>
/// Implements the IPaymentService using Stripe as the payment gateway.
/// This class handles the integration logic, mapping SaloonOS concepts to Stripe's API objects
/// and translating Stripe API responses into meaningful results or exceptions for the application.
/// </summary>
public class StripePaymentService : IPaymentService
{
    private readonly StripeSettings _stripeSettings;
    private readonly ILogger<StripePaymentService> _logger;

    public StripePaymentService(
        IOptions<StripeSettings> stripeSettings,
        ILogger<StripePaymentService> logger)
    {
        _stripeSettings = stripeSettings.Value ?? throw new ArgumentNullException(nameof(stripeSettings));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));

        if (string.IsNullOrEmpty(_stripeSettings.SecretKey))
        {
            throw new InvalidOperationException("Stripe Secret Key is not configured.");
        }
        StripeConfiguration.ApiKey = _stripeSettings.SecretKey;
    }

    /// <inheritdoc />
    public async Task<string> ProcessPaymentAsync(decimal amount, string currency, string paymentToken, string description = "")
    {
        // --- Validation ---
        if (amount <= 0) throw new ArgumentException("Payment amount must be positive.", nameof(amount));
        if (string.IsNullOrWhiteSpace(currency) || currency.Length != 3) throw new ArgumentException("Currency must be a 3-letter code.", nameof(currency));
        if (string.IsNullOrWhiteSpace(paymentToken)) throw new ArgumentException("Payment token is required.", nameof(paymentToken));

        try
        {
            // --- Map to Stripe API Objects ---
            var options = new ChargeCreateOptions
            {
                Amount = (long)(amount * 100), // Stripe expects amount in the smallest currency unit (e.g., cents for USD).
                Currency = currency.ToLowerInvariant(),
                Source = paymentToken, // The token generated by Stripe.js or similar client-side library.
                Description = !string.IsNullOrWhiteSpace(description) ? description : $"SaloonOS Payment - {currency.ToUpperInvariant()}",
                Capture = true // <-- CORRECTED: Replaced 'CaptureMethod' with the modern boolean 'Capture' property.
            };

            // --- Execute Stripe API Call ---
            var service = new ChargeService();
            Charge charge = await service.CreateAsync(options);

            // --- Process Stripe Response ---
            if (charge.Status == "succeeded")
            {
                _logger.LogInformation("Stripe payment succeeded for charge ID: {ChargeId}", charge.Id);
                return charge.Id;
            }
            else
            {
                _logger.LogWarning("Stripe payment did not succeed. Status: {Status}, Charge ID: {ChargeId}", charge.Status, charge.Id);
                throw new PaymentException($"Payment failed with status: {charge.Status}");
            }
        }
        catch (StripeException stripeEx)
        {
            _logger.LogError(stripeEx, "Stripe API error during payment processing. Code: {StripeErrorCode}, Message: {StripeErrorMessage}", stripeEx.StripeError?.Code, stripeEx.StripeError?.Message);
            throw new PaymentException($"Stripe error: {stripeEx.StripeError?.Message ?? stripeEx.Message}", stripeEx);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An unexpected error occurred during payment processing.");
            throw new PaymentException("An unexpected error occurred during payment processing.", ex);
        }
    }
}