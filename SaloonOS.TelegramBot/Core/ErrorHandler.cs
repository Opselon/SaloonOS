// Path: Core/ErrorHandler.cs
using Microsoft.Extensions.Logging;
using Telegram.Bot;
using Telegram.Bot.Exceptions;

namespace SaloonOS.TelegramBot.Core;

/// <summary>
/// A static class containing the global error handling logic for the Telegram polling process.
/// This handler is designed to be called by the polling service when an exception occurs
/// during the long-polling request to Telegram's servers. It does not handle exceptions
/// within the update processing logic itself.
/// </summary>
public static class ErrorHandler
{
    /// <summary>
    /// Handles exceptions generated by the Telegram.Bot poller.
    /// It logs the error and formats it for readability.
    /// </summary>
    /// <param name="botClient">The bot client instance, provided by the poller.</param>
    /// <param name="exception">The exception that occurred.</param>
    /// <param name="cancellationToken">The cancellation token for the polling operation.</param>
    /// <returns>A completed task.</returns>
    public static Task HandlePollingErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
    {
        // We cannot use dependency injection in a static class, so if we needed ILogger,
        // we would have to pass it in as a parameter from the PollingService.
        // For simplicity, we will use Console.WriteLine here, with the understanding that
        // a production system would integrate a proper logging framework.

        var errorMessage = exception switch
        {
            // A specific exception type from the Telegram.Bot library for API errors.
            ApiRequestException apiRequestException
                => $"Telegram API Error:\n" +
                   $"[{apiRequestException.ErrorCode}]\n" +
                   $"{apiRequestException.Message}",

            // Handle other types of exceptions if necessary.
            // For example, a timeout exception.
            TaskCanceledException when exception.InnerException is TimeoutException =>
                "Polling timeout occurred. This is informational and usually normal.",

            // The default case for any other exception.
            _ => exception.ToString()
        };

        Console.ForegroundColor = ConsoleColor.Red;
        Console.WriteLine("--- POLLING ERROR ---");
        Console.WriteLine(errorMessage);
        Console.ResetColor();

        return Task.CompletedTask;
    }
}